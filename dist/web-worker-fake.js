;
var fakeworker = (function (global) {
    function extend(dest, src) {
        for (var i in src) {
            dest[i] = src[i];
        }
    }
    // >>>>>>>>>> this part is copied and modified from jQuery 1.2.6 (Copyright
    // (c) 2008 John Resig (jquery.com))
    var userAgent = navigator.userAgent.toLowerCase();
    // Figure out what browser is being used
    var browser = {
        version: (userAgent.match(/.+(?:rv|it|ra|ie)[\/: ]([\d.]+)/) || [])[1],
        safari: /webkit/.test(userAgent),
        opera: /opera/.test(userAgent),
        msie: /msie/.test(userAgent) && !/opera/.test(userAgent),
        mozilla: /mozilla/.test(userAgent) && !/(compatible|webkit)/.test(userAgent)
    };
    // Determines if an XMLHttpRequest was successful or not
    function httpSuccess(xhr) {
        try {
            // IE error sometimes returns 1223 when it should be 204 so treat it
            // as success, see #1450
            return !xhr.status && location.protocol == "file:" ||
                (xhr.status >= 200 && xhr.status < 300) ||
                xhr.status == 304 ||
                xhr.status == 1223 ||
                browser.safari && xhr.status == undefined;
        }
        catch (e) {
        }
        return false;
    }
    ;
    // <<<<<<<<<<<<<<<<<<<<
    function __syncXhrGet(url, fn) {
        var xhr = window.ActiveXObject ? new ActiveXObject("Microsoft.XMLHTTP") : new XMLHttpRequest();
        // sync request
        xhr.open("GET", url, false);
        /*
         xhr.onreadystatechange = function(){
         if (xhr.readyState == 4) {
         if (httpSuccess(xhr)) {
         try {
         fn(xhr);
         }
         catch (e) {
         throw e;
         }
         }
         else {
         throw new Error("Could not load resource(" + url + ") result=" + xhr.status + ":" + xhr.statusText);
         }
         }
         };
         */
        xhr.send("");
        if (httpSuccess(xhr)) {
            fn(xhr);
        }
        else {
            throw new Error("Could not load resource(" + url + ") result=" + xhr.status + ":" + xhr.statusText);
        }
    }
    // >>>>>>>>>> this part is copied from parseUri 1.2.2
    // (c) Steven Levithan <stevenlevithan.com>
    // MIT License
    function parseUri(str) {
        var o = parseUri.options, m = o.parser[o.strictMode ? "strict" : "loose"].exec(str), uri = {}, i = 14;
        while (i--)
            uri[o.key[i]] = m[i] || "";
        uri[o.q.name] = {};
        uri[o.key[12]].replace(o.q.parser, function ($0, $1, $2) {
            if ($1)
                uri[o.q.name][$1] = $2;
        });
        return uri;
    }
    ;
    parseUri.options = {
        strictMode: false,
        key: ["source", "protocol", "authority", "userInfo", "user", "password", "host", "port", "relative", "path", "directory", "file", "query", "anchor"],
        q: {
            name: "queryKey",
            parser: /(?:^|&)([^&=]*)=?([^&]*)/g
        },
        parser: {
            strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
            loose: /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/
        }
    };
    // <<<<<<<<<<<<<<<<<<<<
    // >>>>>>>>>> this part is copied from http://d.hatena.ne.jp/brazil/20070103/1167788352
    function absolutePath(path) {
        var e = document.createElement('span');
        e.innerHTML = '<a href="' + path + '" />';
        return e.firstChild.href;
    }
    // <<<<<<<<<<<<<<<<<<<<
    function FakeMessageEvent(worker) {
        extend(this, Event);
        Event.constructor.call(this);
        this.currentTarget = worker;
        this.srcElement = worker;
        this.target = worker;
        this.timestamp = new Date().getTime();
    }
    FakeMessageEvent.prototype = {
        initMessageEvent: function (type, canBubble, cancelable, data, origin, lastEventId, source, ports) {
            this.initMessageEventNS("", type, canBubble, cancelable, data, origin, lastEventId, source, ports);
        },
        initMessageEventNS: function (namespaceURI, type, canBubble, cancelable, data, origin, lastEventId, source, ports) {
            this.namespaceURI = namespaceURI;
            this.type = type;
            this.canBubble = canBubble;
            this.cancelable = cancelable;
            this.data = data;
            this.origin = origin;
            this.lastEventId = lastEventId;
            this.source = source;
            this.ports = ports;
        }
    };
    function FakeErrorEvent(worker) {
        extend(this, Event);
        Event.constructor.call(this);
        this.currentTarget = worker;
        this.srcElement = worker;
        this.target = worker;
        this.timestamp = new Date().getTime();
    }
    FakeErrorEvent.prototype = {
        initErrorEvent: function (type, canBubble, cancelable, message, filename, lineno) {
            this.initErrorEventNS("", type, canBubble, cancelable, message, filename, lineno);
        },
        initErrorEventNS: function (namespaceURI, type, canBubble, cancelable, message, filename, lineno) {
            this.namespaceURI = namespaceURI;
            this.type = type;
            this.canBubble = canBubble;
            this.cancelable = cancelable;
            this.message = message;
            this.filename = filename;
            this.lineno = lineno;
        }
    };
    var nativeWorker = global["Worker"];
    var FakeWorker = function (url) {
        var self = this;
        this._listenerNamespaces = {}; // event listeners
        this._eventQueues = {};
        __syncXhrGet(url, function (xhr) {
            try {
                self._workerContext = new FakeWorkerContext(url, xhr.responseText, self);
            }
            catch (e) {
                throw e;
            }
        });
    };
    FakeWorker.prototype = {
        isFake: true,
        addEventListener: function (type, listener, useCapture) {
            this.addEventListenerNS("", type, listener, useCapture);
        },
        addEventListenerNS: function (namespaceURI, type, listener, useCapture) {
            var namespace = this._listenerNamespaces[namespaceURI];
            if (!namespace) {
                this._listenerNamespaces[namespaceURI] = namespace = {};
            }
            var listeners = namespace[type];
            if (!listeners) {
                namespace[type] = listeners = [];
            }
            listeners.push(listener);
        },
        removeEventListener: function (type, listener, useCapture) {
            this.removeEventListener("", type, listener, useCapture);
        },
        removeEventListenerNS: function (namespaceURI, eventName, fn, useCapture) {
            var namespace = this._listenerNamespaces[namespaceURI];
            if (namespace) {
                var listeners = namespace[type];
                if (listeners) {
                    for (var i = 0; i < listeners.length; i++) {
                        if (listeners[i] === listener) {
                            delete listeners[i];
                        }
                    }
                }
            }
        },
        dispatchEvent: function (event) {
            if (typeof this["on" + event.type] == "function") {
                this["on" + event.type].call(this, event);
            }
            var namespace = this._listenerNamespaces[event.namespaceURI];
            if (namespace) {
                var listeners = namespace[event.type];
                if (listeners) {
                    for (var i = 0; i < listeners.length; i++) {
                        listeners[i].call(this, event);
                    }
                }
            }
            return true;
        },
        postMessage: function (msg) {
            var self = this;
            var workerContext = this._workerContext;
            if (typeof workerContext.onmessage == "function") {
                // for testability, we don't do the "structual clone".
                var event = new FakeMessageEvent(self);
                event.initMessageEvent("message", false, false, msg, "", "", null, null);
                setTimeout(function () {
                    try {
                        workerContext.onmessage.call(workerContext, event);
                    }
                    catch (e) {
                        var errorEvent = new FakeErrorEvent(self);
                        var lineno = e.line || e.lineNumber;
                        errorEvent.initErrorEvent("error", false, false, e.message, workerContext.location.filename, lineno);
                        self.dispatchEvent(errorEvent);
                        throw e;
                    }
                }, 0);
            }
        },
        terminate: function () {
            this._workerContext.close();
        }
    };
    function FakeWorkerLocation(url) {
        var absolute = absolutePath(url);
        var parsed = parseUri(absolute);
        this.href = absolute;
        this.protocol = parsed.protocol + ":";
        this.host = parsed.port ? parsed.host + ":" + parsed.port : parsed.host;
        this.hostname = parsed.host;
        this.port = parsed.port;
        this.pathname = parsed.path;
        this.search = parsed.query ? "?" + parsed.query : "";
        this.hash = parsed.anchor ? "#" + parsed.anchor : "";
        this.filename = parsed.file;
    }
    FakeWorkerLocation.prototype = {
        toString: function () {
            return this.href;
        }
    };
    function FakeWorkerContext(url, source, worker) {
        var postMessage = this.postMessage = function (msg) {
            var event = new FakeMessageEvent(worker);
            event.initMessageEvent("message", false, false, msg, "", "", null, null);
            setTimeout(function () {
                worker.dispatchEvent(event);
            }, 0);
        };
        var setTimeout = this.setTimeout = global.setTimeout;
        var clearTimeout = this.clearTimeout = global.clearTimeout;
        var setInterval = this.setInterval = global.setInterval;
        var clearInterval = this.clearInterval = global.clearInterval;
        var XMLHttpRequest = this.XMLHttpRequest = global.XMLHttpRequest;
        var openDatabase = this.openDatabase = global.openDatabase;
        var openDatabaseSync = this.openDatabaseSync = global.openDatabaseSync;
        var WebSocket = this.WebSocket = global.WebSocket;
        var EventSource = this.EventSource = global.EventSource;
        var MessageChannel = this.MessageChannel = global.MessageChannel;
        var Worker = this.Worker = FakeWorker;
        //var SharedWorker = this.SharedWorker = SharedWorker;
        var location = this.location = new FakeWorkerLocation(url);
        var close = this.close = function () {
            this.closing = true;
            // not yet implemented
        };
        var navigator = this.navigator = global.navigator;
        var self = this.self = this;
        var importScripts = this.importScripts = function () {
            /*
             for (var i = 0; i < arguments.length; i++) {
             __syncXhrGet(arguments[i], function(xhr){
             with (global) eval(xhr.responseText);
             });
             }
             */
            throw new Error("importScripts is not supported.");
        };
        //var __importScriptsSource = "(function(__global){" + __syncXhrGet.toString() + ";importScripts=" + __importScripts.toString() + "})(this);";
        //eval(__importScriptsSource + source);
        // execute worker
        eval(source);
        // pick up the onmessage global handler in eval context to this context
        try {
            if (typeof onmessage == "function") {
                this.onmessage = onmessage;
            }
        }
        catch (e) {
        }
    }
    var ret = {
        nativeWorker: nativeWorker,
        install: function () {
            global["Worker"] = FakeWorker;
        },
        uninstall: function () {
            global["Worker"] = nativeWorker;
        }
    };
    // auto install
    ret.install();
    return ret;
})(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYi13b3JrZXItZmFrZS50cyJdLCJuYW1lcyI6WyJleHRlbmQiLCJodHRwU3VjY2VzcyIsIl9fX3N5bmNYaHJHZXQiLCJwYXJzZVVyaSIsImFic29sdXRlUGF0aCIsIkZha2VNZXNzYWdlRXZlbnQiLCJGYWtlRXJyb3JFdmVudCIsIkZha2VXb3JrZXJMb2NhdGlvbiIsIkZha2VXb3JrZXJDb250ZXh0Il0sIm1hcHBpbmdzIjoiQUFBQSxDQUFDO0FBQ0QsSUFBSSxVQUFVLEdBQUcsQ0FBQyxVQUFTLE1BQU07SUFDN0IsZ0JBQWdCLElBQUksRUFBRSxHQUFHO1FBQ3JCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxJQUFJQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNoQkEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDckJBLENBQUNBO0lBQ0xBLENBQUNBO0lBQ0QsMkVBQTJFO0lBQzNFLG9DQUFvQztJQUNwQyxJQUFJLFNBQVMsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2xELHdDQUF3QztJQUN4QyxJQUFJLE9BQU8sR0FBRztRQUNWLE9BQU8sRUFBRSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsaUNBQWlDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ2hDLEtBQUssRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUM5QixJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3hELE9BQU8sRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFD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LFNBQVMsRUFBRTtZQUNQLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxZQUFZLENBQUM7UUFDcEMsQ0FBQztLQUNKLENBQUM7SUFDRixlQUFlO0lBQ2YsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2QsTUFBTSxDQUFDLEdBQUcsQ0FBQztBQUNmLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDIiwiZmlsZSI6IndlYi13b3JrZXItZmFrZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIjtcclxudmFyIGZha2V3b3JrZXIgPSAoZnVuY3Rpb24oZ2xvYmFsKXtcclxuICAgIGZ1bmN0aW9uIGV4dGVuZChkZXN0LCBzcmMpe1xyXG4gICAgICAgIGZvciAodmFyIGkgaW4gc3JjKSB7XHJcbiAgICAgICAgICAgIGRlc3RbaV0gPSBzcmNbaV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gPj4+Pj4+Pj4+PiB0aGlzIHBhcnQgaXMgY29waWVkIGFuZCBtb2RpZmllZCBmcm9tIGpRdWVyeSAxLjIuNiAoQ29weXJpZ2h0XHJcbiAgICAvLyAoYykgMjAwOCBKb2huIFJlc2lnIChqcXVlcnkuY29tKSlcclxuICAgIHZhciB1c2VyQWdlbnQgPSBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XHJcbiAgICAvLyBGaWd1cmUgb3V0IHdoYXQgYnJvd3NlciBpcyBiZWluZyB1c2VkXHJcbiAgICB2YXIgYnJvd3NlciA9IHtcclxuICAgICAgICB2ZXJzaW9uOiAodXNlckFnZW50Lm1hdGNoKC8uKyg/OnJ2fGl0fHJhfGllKVtcXC86IF0oW1xcZC5dKykvKSB8fCBbXSlbMV0sXHJcbiAgICAgICAgc2FmYXJpOiAvd2Via2l0Ly50ZXN0KHVzZXJBZ2VudCksXHJcbiAgICAgICAgb3BlcmE6IC9vcGVyYS8udGVzdCh1c2VyQWdlbnQpLFxyXG4gICAgICAgIG1zaWU6IC9tc2llLy50ZXN0KHVzZXJBZ2VudCkgJiYgIS9vcGVyYS8udGVzdCh1c2VyQWdlbnQpLFxyXG4gICAgICAgIG1vemlsbGE6IC9tb3ppbGxhLy50ZXN0KHVzZXJBZ2VudCkgJiYgIS8oY29tcGF0aWJsZXx3ZWJraXQpLy50ZXN0KHVzZXJBZ2VudClcclxuICAgIH07XHJcbiAgICAvLyBEZXRlcm1pbmVzIGlmIGFuIFhNTEh0dHBSZXF1ZXN0IHdhcyBzdWNjZXNzZnVsIG9yIG5vdFxyXG4gICAgZnVuY3Rpb24gaHR0cFN1Y2Nlc3MoeGhyKXtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyBJRSBlcnJvciBzb21ldGltZXMgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNCBzbyB0cmVhdCBpdFxyXG4gICAgICAgICAgICAvLyBhcyBzdWNjZXNzLCBzZWUgIzE0NTBcclxuICAgICAgICAgICAgcmV0dXJuICF4aHIuc3RhdHVzICYmIGxvY2F0aW9uLnByb3RvY29sID09IFwiZmlsZTpcIiB8fFxyXG4gICAgICAgICAgICAgICAgKHhoci5zdGF0dXMgPj0gMjAwICYmIHhoci5zdGF0dXMgPCAzMDApIHx8XHJcbiAgICAgICAgICAgICAgICB4aHIuc3RhdHVzID09IDMwNCB8fFxyXG4gICAgICAgICAgICAgICAgeGhyLnN0YXR1cyA9PSAxMjIzIHx8XHJcbiAgICAgICAgICAgICAgICBicm93c2VyLnNhZmFyaSAmJiB4aHIuc3RhdHVzID09IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIC8vIDw8PDw8PDw8PDw8PDw8PDw8PDw8XHJcblxyXG4gICAgZnVuY3Rpb24gX19zeW5jWGhyR2V0KHVybCwgZm4pe1xyXG4gICAgICAgIHZhciB4aHIgPSB3aW5kb3cuQWN0aXZlWE9iamVjdCA/IG5ldyBBY3RpdmVYT2JqZWN0KFwiTWljcm9zb2Z0LlhNTEhUVFBcIikgOiBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgICAgICAvLyBzeW5jIHJlcXVlc3RcclxuICAgICAgICB4aHIub3BlbihcIkdFVFwiLCB1cmwsIGZhbHNlKTtcclxuICAgICAgICAvKlxyXG4gICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09IDQpIHtcclxuICAgICAgICAgaWYgKGh0dHBTdWNjZXNzKHhocikpIHtcclxuICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgZm4oeGhyKTtcclxuICAgICAgICAgfVxyXG4gICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICB0aHJvdyBlO1xyXG4gICAgICAgICB9XHJcbiAgICAgICAgIH1cclxuICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBsb2FkIHJlc291cmNlKFwiICsgdXJsICsgXCIpIHJlc3VsdD1cIiArIHhoci5zdGF0dXMgKyBcIjpcIiArIHhoci5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgfVxyXG4gICAgICAgICB9XHJcbiAgICAgICAgIH07XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgeGhyLnNlbmQoXCJcIik7XHJcbiAgICAgICAgaWYgKGh0dHBTdWNjZXNzKHhocikpIHtcclxuICAgICAgICAgICAgZm4oeGhyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBsb2FkIHJlc291cmNlKFwiICsgdXJsICsgXCIpIHJlc3VsdD1cIiArIHhoci5zdGF0dXMgKyBcIjpcIiArIHhoci5zdGF0dXNUZXh0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gPj4+Pj4+Pj4+PiB0aGlzIHBhcnQgaXMgY29waWVkIGZyb20gcGFyc2VVcmkgMS4yLjJcclxuICAgIC8vIChjKSBTdGV2ZW4gTGV2aXRoYW4gPHN0ZXZlbmxldml0aGFuLmNvbT5cclxuICAgIC8vIE1JVCBMaWNlbnNlXHJcblxyXG4gICAgZnVuY3Rpb24gcGFyc2VVcmkoc3RyKXtcclxuICAgICAgICB2YXIgbyA9IHBhcnNlVXJpLm9wdGlvbnMsIG0gPSBvLnBhcnNlcltvLnN0cmljdE1vZGUgPyBcInN0cmljdFwiIDogXCJsb29zZVwiXS5leGVjKHN0ciksIHVyaSA9IHt9LCBpID0gMTQ7XHJcblxyXG4gICAgICAgIHdoaWxlIChpLS0pXHJcbiAgICAgICAgICAgIHVyaVtvLmtleVtpXV0gPSBtW2ldIHx8IFwiXCI7XHJcblxyXG4gICAgICAgIHVyaVtvLnEubmFtZV0gPSB7fTtcclxuICAgICAgICB1cmlbby5rZXlbMTJdXS5yZXBsYWNlKG8ucS5wYXJzZXIsIGZ1bmN0aW9uKCQwLCAkMSwgJDIpe1xyXG4gICAgICAgICAgICBpZiAoJDEpXHJcbiAgICAgICAgICAgICAgICB1cmlbby5xLm5hbWVdWyQxXSA9ICQyO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gdXJpO1xyXG4gICAgfTtcclxuXHJcbiAgICBwYXJzZVVyaS5vcHRpb25zID0ge1xyXG4gICAgICAgIHN0cmljdE1vZGU6IGZhbHNlLFxyXG4gICAgICAgIGtleTogW1wic291cmNlXCIsIFwicHJvdG9jb2xcIiwgXCJhdXRob3JpdHlcIiwgXCJ1c2VySW5mb1wiLCBcInVzZXJcIiwgXCJwYXNzd29yZFwiLCBcImhvc3RcIiwgXCJwb3J0XCIsIFwicmVsYXRpdmVcIiwgXCJwYXRoXCIsIFwiZGlyZWN0b3J5XCIsIFwiZmlsZVwiLCBcInF1ZXJ5XCIsIFwiYW5jaG9yXCJdLFxyXG4gICAgICAgIHE6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJxdWVyeUtleVwiLFxyXG4gICAgICAgICAgICBwYXJzZXI6IC8oPzpefCYpKFteJj1dKik9PyhbXiZdKikvZ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcGFyc2VyOiB7XHJcbiAgICAgICAgICAgIHN0cmljdDogL14oPzooW146XFwvPyNdKyk6KT8oPzpcXC9cXC8oKD86KChbXjpAXSopKD86OihbXjpAXSopKT8pP0ApPyhbXjpcXC8/I10qKSg/OjooXFxkKikpPykpPygoKCg/OltePyNcXC9dKlxcLykqKShbXj8jXSopKSg/OlxcPyhbXiNdKikpPyg/OiMoLiopKT8pLyxcclxuICAgICAgICAgICAgbG9vc2U6IC9eKD86KD8hW146QF0rOlteOkBcXC9dKkApKFteOlxcLz8jLl0rKTopPyg/OlxcL1xcLyk/KCg/OigoW146QF0qKSg/OjooW146QF0qKSk/KT9AKT8oW146XFwvPyNdKikoPzo6KFxcZCopKT8pKCgoXFwvKD86W14/I10oPyFbXj8jXFwvXSpcXC5bXj8jXFwvLl0rKD86Wz8jXXwkKSkpKlxcLz8pPyhbXj8jXFwvXSopKSg/OlxcPyhbXiNdKikpPyg/OiMoLiopKT8pL1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvLyA8PDw8PDw8PDw8PDw8PDw8PDw8PFxyXG5cclxuICAgIC8vID4+Pj4+Pj4+Pj4gdGhpcyBwYXJ0IGlzIGNvcGllZCBmcm9tIGh0dHA6Ly9kLmhhdGVuYS5uZS5qcC9icmF6aWwvMjAwNzAxMDMvMTE2Nzc4ODM1MlxyXG4gICAgZnVuY3Rpb24gYWJzb2x1dGVQYXRoKHBhdGgpe1xyXG4gICAgICAgIHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgICAgIGUuaW5uZXJIVE1MID0gJzxhIGhyZWY9XCInICsgcGF0aCArICdcIiAvPic7XHJcbiAgICAgICAgcmV0dXJuIGUuZmlyc3RDaGlsZC5ocmVmO1xyXG4gICAgfVxyXG4gICAgLy8gPDw8PDw8PDw8PDw8PDw8PDw8PDxcclxuXHJcbiAgICBmdW5jdGlvbiBGYWtlTWVzc2FnZUV2ZW50KHdvcmtlcil7XHJcbiAgICAgICAgZXh0ZW5kKHRoaXMsIEV2ZW50KTtcclxuICAgICAgICBFdmVudC5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuY3VycmVudFRhcmdldCA9IHdvcmtlcjtcclxuICAgICAgICB0aGlzLnNyY0VsZW1lbnQgPSB3b3JrZXI7XHJcbiAgICAgICAgdGhpcy50YXJnZXQgPSB3b3JrZXI7XHJcbiAgICAgICAgdGhpcy50aW1lc3RhbXAgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgIH1cclxuICAgIEZha2VNZXNzYWdlRXZlbnQucHJvdG90eXBlID0ge1xyXG4gICAgICAgIGluaXRNZXNzYWdlRXZlbnQ6IGZ1bmN0aW9uKHR5cGUsIGNhbkJ1YmJsZSwgY2FuY2VsYWJsZSwgZGF0YSwgb3JpZ2luLCBsYXN0RXZlbnRJZCwgc291cmNlLCBwb3J0cyl7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdE1lc3NhZ2VFdmVudE5TKFwiXCIsIHR5cGUsIGNhbkJ1YmJsZSwgY2FuY2VsYWJsZSwgZGF0YSwgb3JpZ2luLCBsYXN0RXZlbnRJZCwgc291cmNlLCBwb3J0cyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbml0TWVzc2FnZUV2ZW50TlM6IGZ1bmN0aW9uKG5hbWVzcGFjZVVSSSwgdHlwZSwgY2FuQnViYmxlLCBjYW5jZWxhYmxlLCBkYXRhLCBvcmlnaW4sIGxhc3RFdmVudElkLCBzb3VyY2UsIHBvcnRzKXtcclxuICAgICAgICAgICAgdGhpcy5uYW1lc3BhY2VVUkkgPSBuYW1lc3BhY2VVUkk7XHJcbiAgICAgICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICAgICAgICAgIHRoaXMuY2FuQnViYmxlID0gY2FuQnViYmxlO1xyXG4gICAgICAgICAgICB0aGlzLmNhbmNlbGFibGUgPSBjYW5jZWxhYmxlO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgICAgICB0aGlzLm9yaWdpbiA9IG9yaWdpbjtcclxuICAgICAgICAgICAgdGhpcy5sYXN0RXZlbnRJZCA9IGxhc3RFdmVudElkO1xyXG4gICAgICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcclxuICAgICAgICAgICAgdGhpcy5wb3J0cyA9IHBvcnRzO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBmdW5jdGlvbiBGYWtlRXJyb3JFdmVudCh3b3JrZXIpe1xyXG4gICAgICAgIGV4dGVuZCh0aGlzLCBFdmVudCk7XHJcbiAgICAgICAgRXZlbnQuY29uc3RydWN0b3IuY2FsbCh0aGlzKTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRUYXJnZXQgPSB3b3JrZXI7XHJcbiAgICAgICAgdGhpcy5zcmNFbGVtZW50ID0gd29ya2VyO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0ID0gd29ya2VyO1xyXG4gICAgICAgIHRoaXMudGltZXN0YW1wID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICB9XHJcbiAgICBGYWtlRXJyb3JFdmVudC5wcm90b3R5cGUgPSB7XHJcbiAgICAgICAgaW5pdEVycm9yRXZlbnQ6IGZ1bmN0aW9uKHR5cGUsIGNhbkJ1YmJsZSwgY2FuY2VsYWJsZSwgbWVzc2FnZSwgZmlsZW5hbWUsIGxpbmVubyl7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdEVycm9yRXZlbnROUyhcIlwiLCB0eXBlLCBjYW5CdWJibGUsIGNhbmNlbGFibGUsIG1lc3NhZ2UsIGZpbGVuYW1lLCBsaW5lbm8pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW5pdEVycm9yRXZlbnROUzogZnVuY3Rpb24obmFtZXNwYWNlVVJJLCB0eXBlLCBjYW5CdWJibGUsIGNhbmNlbGFibGUsIG1lc3NhZ2UsIGZpbGVuYW1lLCBsaW5lbm8pe1xyXG4gICAgICAgICAgICB0aGlzLm5hbWVzcGFjZVVSSSA9IG5hbWVzcGFjZVVSSTtcclxuICAgICAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgICAgICAgICAgdGhpcy5jYW5CdWJibGUgPSBjYW5CdWJibGU7XHJcbiAgICAgICAgICAgIHRoaXMuY2FuY2VsYWJsZSA9IGNhbmNlbGFibGU7XHJcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsZW5hbWUgPSBmaWxlbmFtZTtcclxuICAgICAgICAgICAgdGhpcy5saW5lbm8gPSBsaW5lbm87XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgbmF0aXZlV29ya2VyID0gZ2xvYmFsW1wiV29ya2VyXCJdO1xyXG4gICAgdmFyIEZha2VXb3JrZXIgPSBmdW5jdGlvbih1cmwpe1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICB0aGlzLl9saXN0ZW5lck5hbWVzcGFjZXMgPSB7fTsgLy8gZXZlbnQgbGlzdGVuZXJzXHJcbiAgICAgICAgdGhpcy5fZXZlbnRRdWV1ZXMgPSB7fTtcclxuXHJcbiAgICAgICAgX19zeW5jWGhyR2V0KHVybCwgZnVuY3Rpb24oeGhyKXtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHNlbGYuX3dvcmtlckNvbnRleHQgPSBuZXcgRmFrZVdvcmtlckNvbnRleHQodXJsLCB4aHIucmVzcG9uc2VUZXh0LCBzZWxmKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEZha2VXb3JrZXIucHJvdG90eXBlID0ge1xyXG4gICAgICAgIGlzRmFrZTogdHJ1ZSxcclxuICAgICAgICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lciwgdXNlQ2FwdHVyZSl7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lck5TKFwiXCIsIHR5cGUsIGxpc3RlbmVyLCB1c2VDYXB0dXJlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXJOUzogZnVuY3Rpb24obmFtZXNwYWNlVVJJLCB0eXBlLCBsaXN0ZW5lciwgdXNlQ2FwdHVyZSl7XHJcbiAgICAgICAgICAgIHZhciBuYW1lc3BhY2UgPSB0aGlzLl9saXN0ZW5lck5hbWVzcGFjZXNbbmFtZXNwYWNlVVJJXTtcclxuICAgICAgICAgICAgaWYgKCFuYW1lc3BhY2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xpc3RlbmVyTmFtZXNwYWNlc1tuYW1lc3BhY2VVUkldID0gbmFtZXNwYWNlID0ge307XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGxpc3RlbmVycyA9IG5hbWVzcGFjZVt0eXBlXTtcclxuICAgICAgICAgICAgaWYgKCFsaXN0ZW5lcnMpIHtcclxuICAgICAgICAgICAgICAgIG5hbWVzcGFjZVt0eXBlXSA9IGxpc3RlbmVycyA9IFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyLCB1c2VDYXB0dXJlKXtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKFwiXCIsIHR5cGUsIGxpc3RlbmVyLCB1c2VDYXB0dXJlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJOUzogZnVuY3Rpb24obmFtZXNwYWNlVVJJLCBldmVudE5hbWUsIGZuLCB1c2VDYXB0dXJlKXtcclxuICAgICAgICAgICAgdmFyIG5hbWVzcGFjZSA9IHRoaXMuX2xpc3RlbmVyTmFtZXNwYWNlc1tuYW1lc3BhY2VVUkldO1xyXG4gICAgICAgICAgICBpZiAobmFtZXNwYWNlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGlzdGVuZXJzID0gbmFtZXNwYWNlW3R5cGVdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGxpc3RlbmVycykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5lcnNbaV0gPT09IGxpc3RlbmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgbGlzdGVuZXJzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBkaXNwYXRjaEV2ZW50OiBmdW5jdGlvbihldmVudCl7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpc1tcIm9uXCIgKyBldmVudC50eXBlXSA9PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXNbXCJvblwiICsgZXZlbnQudHlwZV0uY2FsbCh0aGlzLCBldmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIG5hbWVzcGFjZSA9IHRoaXMuX2xpc3RlbmVyTmFtZXNwYWNlc1tldmVudC5uYW1lc3BhY2VVUkldO1xyXG4gICAgICAgICAgICBpZiAobmFtZXNwYWNlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGlzdGVuZXJzID0gbmFtZXNwYWNlW2V2ZW50LnR5cGVdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGxpc3RlbmVycykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyc1tpXS5jYWxsKHRoaXMsIGV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBwb3N0TWVzc2FnZTogZnVuY3Rpb24obXNnKXtcclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgd29ya2VyQ29udGV4dCA9IHRoaXMuX3dvcmtlckNvbnRleHQ7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygd29ya2VyQ29udGV4dC5vbm1lc3NhZ2UgPT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBmb3IgdGVzdGFiaWxpdHksIHdlIGRvbid0IGRvIHRoZSBcInN0cnVjdHVhbCBjbG9uZVwiLlxyXG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gbmV3IEZha2VNZXNzYWdlRXZlbnQoc2VsZik7XHJcbiAgICAgICAgICAgICAgICBldmVudC5pbml0TWVzc2FnZUV2ZW50KFwibWVzc2FnZVwiLCBmYWxzZSwgZmFsc2UsIG1zZywgXCJcIiwgXCJcIiwgbnVsbCwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd29ya2VyQ29udGV4dC5vbm1lc3NhZ2UuY2FsbCh3b3JrZXJDb250ZXh0LCBldmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnJvckV2ZW50ID0gbmV3IEZha2VFcnJvckV2ZW50KHNlbGYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGluZW5vID0gZS5saW5lIHx8IGUubGluZU51bWJlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JFdmVudC5pbml0RXJyb3JFdmVudChcImVycm9yXCIsIGZhbHNlLCBmYWxzZSwgZS5tZXNzYWdlLCB3b3JrZXJDb250ZXh0LmxvY2F0aW9uLmZpbGVuYW1lLCBsaW5lbm8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmRpc3BhdGNoRXZlbnQoZXJyb3JFdmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSwgMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHRlcm1pbmF0ZTogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgdGhpcy5fd29ya2VyQ29udGV4dC5jbG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gRmFrZVdvcmtlckxvY2F0aW9uKHVybCl7XHJcbiAgICAgICAgdmFyIGFic29sdXRlID0gYWJzb2x1dGVQYXRoKHVybCk7XHJcbiAgICAgICAgdmFyIHBhcnNlZCA9IHBhcnNlVXJpKGFic29sdXRlKTtcclxuICAgICAgICB0aGlzLmhyZWYgPSBhYnNvbHV0ZTtcclxuICAgICAgICB0aGlzLnByb3RvY29sID0gcGFyc2VkLnByb3RvY29sICsgXCI6XCI7XHJcbiAgICAgICAgdGhpcy5ob3N0ID0gcGFyc2VkLnBvcnQgPyBwYXJzZWQuaG9zdCArIFwiOlwiICsgcGFyc2VkLnBvcnQgOiBwYXJzZWQuaG9zdDtcclxuICAgICAgICB0aGlzLmhvc3RuYW1lID0gcGFyc2VkLmhvc3Q7XHJcbiAgICAgICAgdGhpcy5wb3J0ID0gcGFyc2VkLnBvcnQ7XHJcbiAgICAgICAgdGhpcy5wYXRobmFtZSA9IHBhcnNlZC5wYXRoO1xyXG4gICAgICAgIHRoaXMuc2VhcmNoID0gcGFyc2VkLnF1ZXJ5ID8gXCI/XCIgKyBwYXJzZWQucXVlcnkgOiBcIlwiO1xyXG4gICAgICAgIHRoaXMuaGFzaCA9IHBhcnNlZC5hbmNob3IgPyBcIiNcIiArIHBhcnNlZC5hbmNob3IgOiBcIlwiO1xyXG4gICAgICAgIHRoaXMuZmlsZW5hbWUgPSBwYXJzZWQuZmlsZTtcclxuICAgIH1cclxuICAgIEZha2VXb3JrZXJMb2NhdGlvbi5wcm90b3R5cGUgPSB7XHJcbiAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhyZWY7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBGYWtlV29ya2VyQ29udGV4dCh1cmwsIHNvdXJjZSwgd29ya2VyKXtcclxuICAgICAgICB2YXIgcG9zdE1lc3NhZ2UgPSB0aGlzLnBvc3RNZXNzYWdlID0gZnVuY3Rpb24obXNnKXtcclxuICAgICAgICAgICAgdmFyIGV2ZW50ID0gbmV3IEZha2VNZXNzYWdlRXZlbnQod29ya2VyKTtcclxuICAgICAgICAgICAgZXZlbnQuaW5pdE1lc3NhZ2VFdmVudChcIm1lc3NhZ2VcIiwgZmFsc2UsIGZhbHNlLCBtc2csIFwiXCIsIFwiXCIsIG51bGwsIG51bGwpO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICB3b3JrZXIuZGlzcGF0Y2hFdmVudChldmVudCk7XHJcbiAgICAgICAgICAgIH0sIDApO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIHNldFRpbWVvdXQgPSB0aGlzLnNldFRpbWVvdXQgPSBnbG9iYWwuc2V0VGltZW91dDtcclxuICAgICAgICB2YXIgY2xlYXJUaW1lb3V0ID0gdGhpcy5jbGVhclRpbWVvdXQgPSBnbG9iYWwuY2xlYXJUaW1lb3V0O1xyXG4gICAgICAgIHZhciBzZXRJbnRlcnZhbCA9IHRoaXMuc2V0SW50ZXJ2YWwgPSBnbG9iYWwuc2V0SW50ZXJ2YWw7XHJcbiAgICAgICAgdmFyIGNsZWFySW50ZXJ2YWwgPSB0aGlzLmNsZWFySW50ZXJ2YWwgPSBnbG9iYWwuY2xlYXJJbnRlcnZhbDtcclxuICAgICAgICB2YXIgWE1MSHR0cFJlcXVlc3QgPSB0aGlzLlhNTEh0dHBSZXF1ZXN0ID0gZ2xvYmFsLlhNTEh0dHBSZXF1ZXN0O1xyXG4gICAgICAgIHZhciBvcGVuRGF0YWJhc2UgPSB0aGlzLm9wZW5EYXRhYmFzZSA9IGdsb2JhbC5vcGVuRGF0YWJhc2U7XHJcbiAgICAgICAgdmFyIG9wZW5EYXRhYmFzZVN5bmMgPSB0aGlzLm9wZW5EYXRhYmFzZVN5bmMgPSBnbG9iYWwub3BlbkRhdGFiYXNlU3luYztcclxuICAgICAgICB2YXIgV2ViU29ja2V0ID0gdGhpcy5XZWJTb2NrZXQgPSBnbG9iYWwuV2ViU29ja2V0O1xyXG4gICAgICAgIHZhciBFdmVudFNvdXJjZSA9IHRoaXMuRXZlbnRTb3VyY2UgPSBnbG9iYWwuRXZlbnRTb3VyY2U7XHJcbiAgICAgICAgdmFyIE1lc3NhZ2VDaGFubmVsID0gdGhpcy5NZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcclxuICAgICAgICB2YXIgV29ya2VyID0gdGhpcy5Xb3JrZXIgPSBGYWtlV29ya2VyO1xyXG4gICAgICAgIC8vdmFyIFNoYXJlZFdvcmtlciA9IHRoaXMuU2hhcmVkV29ya2VyID0gU2hhcmVkV29ya2VyO1xyXG5cclxuICAgICAgICB2YXIgbG9jYXRpb24gPSB0aGlzLmxvY2F0aW9uID0gbmV3IEZha2VXb3JrZXJMb2NhdGlvbih1cmwpO1xyXG4gICAgICAgIHZhciBjbG9zZSA9IHRoaXMuY2xvc2UgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NpbmcgPSB0cnVlXHJcbiAgICAgICAgICAgIC8vIG5vdCB5ZXQgaW1wbGVtZW50ZWRcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBuYXZpZ2F0b3IgPSB0aGlzLm5hdmlnYXRvciA9IGdsb2JhbC5uYXZpZ2F0b3I7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzLnNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHZhciBpbXBvcnRTY3JpcHRzID0gdGhpcy5pbXBvcnRTY3JpcHRzID0gZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICBfX3N5bmNYaHJHZXQoYXJndW1lbnRzW2ldLCBmdW5jdGlvbih4aHIpe1xyXG4gICAgICAgICAgICAgd2l0aCAoZ2xvYmFsKSBldmFsKHhoci5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbXBvcnRTY3JpcHRzIGlzIG5vdCBzdXBwb3J0ZWQuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL3ZhciBfX2ltcG9ydFNjcmlwdHNTb3VyY2UgPSBcIihmdW5jdGlvbihfX2dsb2JhbCl7XCIgKyBfX3N5bmNYaHJHZXQudG9TdHJpbmcoKSArIFwiO2ltcG9ydFNjcmlwdHM9XCIgKyBfX2ltcG9ydFNjcmlwdHMudG9TdHJpbmcoKSArIFwifSkodGhpcyk7XCI7XHJcbiAgICAgICAgLy9ldmFsKF9faW1wb3J0U2NyaXB0c1NvdXJjZSArIHNvdXJjZSk7XHJcbiAgICAgICAgLy8gZXhlY3V0ZSB3b3JrZXJcclxuICAgICAgICBldmFsKHNvdXJjZSk7XHJcblxyXG4gICAgICAgIC8vIHBpY2sgdXAgdGhlIG9ubWVzc2FnZSBnbG9iYWwgaGFuZGxlciBpbiBldmFsIGNvbnRleHQgdG8gdGhpcyBjb250ZXh0XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvbm1lc3NhZ2UgPT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9ubWVzc2FnZSA9IG9ubWVzc2FnZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHZhciByZXQgPSB7XHJcbiAgICAgICAgbmF0aXZlV29ya2VyOiBuYXRpdmVXb3JrZXIsXHJcbiAgICAgICAgaW5zdGFsbDogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgZ2xvYmFsW1wiV29ya2VyXCJdID0gRmFrZVdvcmtlcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHVuaW5zdGFsbDogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgZ2xvYmFsW1wiV29ya2VyXCJdID0gbmF0aXZlV29ya2VyO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvLyBhdXRvIGluc3RhbGxcclxuICAgIHJldC5pbnN0YWxsKCk7XHJcbiAgICByZXR1cm4gcmV0O1xyXG59KSh0aGlzKTtcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9